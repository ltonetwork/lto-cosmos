syntax = "proto3";
package lto.lto;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "lto/lto/params.proto";
import "lto/lto/anchor.proto";
// this line is used by starport scaffolding # 1

option go_package = "lto/x/lto/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/lto/lto/params";
  }
  // Queries a list of NetworkType items.
	rpc NetworkType(QueryNetworkTypeRequest) returns (QueryNetworkTypeResponse) {
		option (google.api.http).get = "/lto/lto/network_type";
	}

// Queries a list of Anchors items.
	rpc Anchors(QueryAnchorsRequest) returns (QueryAnchorsResponse) {
		option (google.api.http).get = "/lto/lto/anchors";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryNetworkTypeRequest {
}

message QueryNetworkTypeResponse {
  string text = 1;
}

message QueryAnchorsRequest {
  // adding pagination to request
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAnchorsResponse {
  // returning a list of anchors
  repeated Anchor Anchor = 1;

  // adding pagination to response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
